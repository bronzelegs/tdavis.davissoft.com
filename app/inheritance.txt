
'use strict';

function Person(first, middle, last, motto) {
  this.firstName = first;
  this.middleName = middle;
  this.lastName = last;
  this.motto = motto;
}

Person.prototype.about = function(){
  return 'Hi, my name is ' + this.firstName + ' ' + this.middleName + ' ' + this.lastName;
};

Person.prototype.toString = function(){
  return this.about();
};

function Job (jobName, desc) {
  this.applyingForJob = jobName;
  this.jobDesc = desc;
}

Job.prototype.about = function(){
  return this.applyingForJob + ': ' + this.jobDesc;
};

Job.prototype.toString = function(){
  return this.about();
};

function Candidate(person, theJob, desc) {
  this.person = person;
  this.job = theJob;
  this.description = desc;
}

Candidate.prototype.about = function(){
  return this.person.about() + ' and I am appying for ' + this.job.about() + ' ' + this.description;
};

Candidate.prototype.toString = function(){
  return this.about();
};


let description = 'this is an example of prototypical inheritance';
let me = new Person('Terrance', 'Alan', 'Davis', 'If I ever grow up I want to be just like me');
let job = new Job('Very special person', 'el Cid');
let candidate = new Candidate(me, job, description)
